package com.example.klimaklog.data.remote

import android.util.Log
import com.example.klimaklog.BuildConfig
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import okhttp3.MediaType.Companion.toMediaType
import okhttp3.OkHttpClient
import okhttp3.Request
import okhttp3.RequestBody.Companion.toRequestBody
import org.json.JSONObject

//Mathias

// AIService sender brugerens sp√∏rgsm√•l til OpenAI API
// og returnerer et letforst√•eligt klima-svar med CO2-aftryk,
// hvad p√•virker det, s√•dan kan du reducere det og fun fact


suspend fun getClimateInfoFromQuery(query: String): String = withContext(Dispatchers.IO) {
    val client = OkHttpClient() // √ân klient til HTTP-kaldet

    // systemPromt definere rolle, tonen og svarets pr√¶cise format
    val systemPrompt = """
    Du er en hj√¶lpsom og p√¶dagogisk klimaassistent for b√∏rn og unge i 8. klasse til 1.g. Dit job er 
    at forklare klimaaftryk og b√¶redygtighed p√• en positiv og forst√•elig m√•de, n√•r de sp√∏rger om et 
    produkt, en aktivitet eller et emne.

    Du skal altid svare i pr√¶cis dette format ‚Äì uden overskrifter, uden ekstra forklaringer ‚Äì kun 
    de fire punkter herunder i n√¶vnte r√¶kkef√∏lge, adskilt af to linjeskift (\n\n):

    1. CO2-aftryk: Forklar kort, hvor meget CO‚ÇÇ der udledes ‚Äì gerne med tal og sammenligninger.
    
    2. Hvad p√•virker det?: Beskriv hvad i produktets livscyklus eller produktion der har st√∏rst 
    effekt p√• klimaet.
    
    3. S√•dan kan du reducere det: Giv 1‚Äì2 simple forslag til gr√∏nnere alternativer eller valg.
    
    4. Fun fact: Slut af med en sjov, positiv eller opmuntrende ekstra viden.

    Tilf√∏j √©n relevant emoji i starten af svaret, som passer bedst muligt til det, brugeren sp√∏rger 
    om (fx üå≠ til hotdog, üßÉ til juice, üëï til t-shirt, üçï til pizza, üßº til s√¶be).

    Svar altid kort og i b√∏rnevenligt sprog. Undg√• sv√¶re ord og forklar ting enkelt.
""".trimIndent()

    // bruger prompt
    val userPrompt = "Hvor meget CO‚ÇÇ udleder: $query?"

    // JSON body til OpenAI
    val json = """
        {
          "model": "gpt-4o",
          "messages": [
            { "role": "system", "content": ${JSONObject.quote(systemPrompt)} },
            { "role": "user", "content": ${JSONObject.quote(userPrompt)} }
          ],
          "temperature": 0.3
        }
    """.trimIndent()

    val body = json.toRequestBody("application/json".toMediaType())

    // HTTP-request
    val request = Request.Builder()
        .url("https://api.openai.com/v1/chat/completions")
        .post(body)
        .addHeader("Authorization", "Bearer ${BuildConfig.OPENAI_API_KEY}")
        .build()

    // udf√∏r og log svaret
    val response = client.newCall(request).execute()
    val responseBody = response.body?.string()
    Log.d("AIService", "HTTP status: ${response.code}")
    Log.d("AIService", "Raw response: $responseBody")
    if (!response.isSuccessful || responseBody == null) {
        Log.e("OpenAI_API_ERROR", "Fejl ved foresp√∏rgsel: ${response.code}")
        throw Exception("Fejl ved OpenAI API")
    }

    // tr√¶kker tekst-svaret ud af JSON
    return@withContext try {
        JSONObject(responseBody)
            .getJSONArray("choices")
            .getJSONObject(0)
            .getJSONObject("message")
            .getString("content")
            .trim()
    } catch (e: Exception) {
        Log.e("OpenAI_API_ERROR", "Fejl under parsing", e)
        throw Exception("OpenAI returnerede ikke gyldigt svar.")
    }
}